/*
* generated by Xtext
*/
grammar InternalLifeTC3;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.github.nanothor.lifetc3.ide.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.github.nanothor.lifetc3.ide.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.github.nanothor.lifetc3.ide.services.LifeTC3GrammarAccess;

}

@parser::members {

 	private LifeTC3GrammarAccess grammarAccess;
 	
    public InternalLifeTC3Parser(TokenStream input, LifeTC3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Prog";	
   	}
   	
   	@Override
   	protected LifeTC3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProg
entryRuleProg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgRule()); }
	 iv_ruleProg=ruleProg 
	 { $current=$iv_ruleProg.current; } 
	 EOF 
;

// Rule Prog
ruleProg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProgAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgAccess().getSemicolonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgAccess().getVcVariableParserRuleCall_3_0_0()); 
	    }
		lv_vc_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgRule());
	        }
       		add(
       			$current, 
       			"vc",
        		lv_vc_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProgAccess().getVcConstantParserRuleCall_3_1_0()); 
	    }
		lv_vc_4_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgRule());
	        }
       		add(
       			$current, 
       			"vc",
        		lv_vc_4_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVarKeyword_0());
    }
(
(
		lv_names_1_0=RULE_ID
		{
			newLeafNode(lv_names_1_0, grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getCommaKeyword_2_0());
    }
(
(
		lv_names_3_0=RULE_ID
		{
			newLeafNode(lv_names_3_0, grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_3_0, 
        		"ID");
	    }

)
))*	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getColonKeyword_3());
    }

    { 
        newCompositeNode(grammarAccess.getVariableAccess().getTypeParserRuleCall_4()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getTypeParserRuleCall_0()); 
    }
ruleType
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getEqualsSignKeyword_2());
    }
(this_INT_LITERAL_3=RULE_INT_LITERAL
    { 
    newLeafNode(this_INT_LITERAL_3, grammarAccess.getConstantAccess().getINT_LITERALTerminalRuleCall_3_0()); 
    }

    |this_FLOAT_LITERAL_4=RULE_FLOAT_LITERAL
    { 
    newLeafNode(this_FLOAT_LITERAL_4, grammarAccess.getConstantAccess().getFLOAT_LITERALTerminalRuleCall_3_1()); 
    }

    |this_STRING_LITERAL_5=RULE_STRING_LITERAL
    { 
    newLeafNode(this_STRING_LITERAL_5, grammarAccess.getConstantAccess().getSTRING_LITERALTerminalRuleCall_3_2()); 
    }

    |	otherlv_6='True' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstantAccess().getTrueKeyword_3_3());
    }

    |	otherlv_7='False' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConstantAccess().getFalseKeyword_3_4());
    }
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstantAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_0()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getIntKeyword_1()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getFloatKeyword_2()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getBooleanKeyword_3()); 
    }
)
    ;





RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_INT_LITERAL : ('0'..'9')+;

RULE_FLOAT_LITERAL : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_STRING_LITERAL : '"' .* '"';

RULE_SL_COMMENT : '//' ~('\n')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


