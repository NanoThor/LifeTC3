/*
* generated by Xtext
*/
package com.github.nanothor.lifetc3.ide.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LifeTC3GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cVcAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cVcVariableParserRuleCall_3_0_0 = (RuleCall)cVcAssignment_3_0.eContents().get(0);
		private final Assignment cVcAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cVcConstantParserRuleCall_3_1_0 = (RuleCall)cVcAssignment_3_1.eContents().get(0);
		
		//Prog:
		//	"class" name=ID ";" (vc+=Variable | vc+=Constant)*;
		public ParserRule getRule() { return rule; }

		//"class" name=ID ";" (vc+=Variable | vc+=Constant)*
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//(vc+=Variable | vc+=Constant)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//vc+=Variable
		public Assignment getVcAssignment_3_0() { return cVcAssignment_3_0; }

		//Variable
		public RuleCall getVcVariableParserRuleCall_3_0_0() { return cVcVariableParserRuleCall_3_0_0; }

		//vc+=Constant
		public Assignment getVcAssignment_3_1() { return cVcAssignment_3_1; }

		//Constant
		public RuleCall getVcConstantParserRuleCall_3_1_0() { return cVcConstantParserRuleCall_3_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Variable:
		//	"var" names+=ID ("," names+=ID)* ":" Type ";";
		public ParserRule getRule() { return rule; }

		//"var" names+=ID ("," names+=ID)* ":" Type ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//names+=ID
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_0() { return cNamesIDTerminalRuleCall_1_0; }

		//("," names+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=ID
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_2_1_0() { return cNamesIDTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cINT_LITERALTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cFLOAT_LITERALTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final Keyword cTrueKeyword_3_3 = (Keyword)cAlternatives_3.eContents().get(3);
		private final Keyword cFalseKeyword_3_4 = (Keyword)cAlternatives_3.eContents().get(4);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//	Type name=ID "=" (INT_LITERAL | FLOAT_LITERAL | STRING_LITERAL | "True" | "False") ";";
		public ParserRule getRule() { return rule; }

		//Type name=ID "=" (INT_LITERAL | FLOAT_LITERAL | STRING_LITERAL | "True" | "False") ";"
		public Group getGroup() { return cGroup; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//INT_LITERAL | FLOAT_LITERAL | STRING_LITERAL | "True" | "False"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//INT_LITERAL
		public RuleCall getINT_LITERALTerminalRuleCall_3_0() { return cINT_LITERALTerminalRuleCall_3_0; }

		//FLOAT_LITERAL
		public RuleCall getFLOAT_LITERALTerminalRuleCall_3_1() { return cFLOAT_LITERALTerminalRuleCall_3_1; }

		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_3_2() { return cSTRING_LITERALTerminalRuleCall_3_2; }

		//"True"
		public Keyword getTrueKeyword_3_3() { return cTrueKeyword_3_3; }

		//"False"
		public Keyword getFalseKeyword_3_4() { return cFalseKeyword_3_4; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Type:
		//	"string" | "int" | "float" | "boolean";
		public ParserRule getRule() { return rule; }

		//"string" | "int" | "float" | "boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//"float"
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }

		//"boolean"
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
	}
	
	
	private final ProgElements pProg;
	private final VariableElements pVariable;
	private final ConstantElements pConstant;
	private final TypeElements pType;
	private final TerminalRule tID;
	private final TerminalRule tINT_LITERAL;
	private final TerminalRule tFLOAT_LITERAL;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LifeTC3GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProg = new ProgElements();
		this.pVariable = new VariableElements();
		this.pConstant = new ConstantElements();
		this.pType = new TypeElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_LITERAL");
		this.tFLOAT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_LITERAL");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LITERAL");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.github.nanothor.lifetc3.ide.LifeTC3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Prog:
	//	"class" name=ID ";" (vc+=Variable | vc+=Constant)*;
	public ProgElements getProgAccess() {
		return pProg;
	}
	
	public ParserRule getProgRule() {
		return getProgAccess().getRule();
	}

	//Variable:
	//	"var" names+=ID ("," names+=ID)* ":" Type ";";
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Constant:
	//	Type name=ID "=" (INT_LITERAL | FLOAT_LITERAL | STRING_LITERAL | "True" | "False") ";";
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Type:
	//	"string" | "int" | "float" | "boolean";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "_")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT_LITERAL:
	//	"0".."9"+;
	public TerminalRule getINT_LITERALRule() {
		return tINT_LITERAL;
	} 

	//terminal FLOAT_LITERAL:
	//	"0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getFLOAT_LITERALRule() {
		return tFLOAT_LITERAL;
	} 

	//terminal STRING_LITERAL:
	//	"\"" .* "\"";
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	} 

	//terminal SL_COMMENT:
	//	"//" !"\n"*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
