/*
* generated by Xtext
*/
grammar InternalLifeTC3;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.github.nanothor.lifetc3.ide.services.LifeTC3GrammarAccess;

}

@parser::members {
 
 	private LifeTC3GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LifeTC3GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProg
entryRuleProg 
:
{ before(grammarAccess.getProgRule()); }
	 ruleProg
{ after(grammarAccess.getProgRule()); } 
	 EOF 
;

// Rule Prog
ruleProg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgAccess().getGroup()); }
(rule__Prog__Group__0)
{ after(grammarAccess.getProgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Prog__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getVcAssignment_3_0()); }
(rule__Prog__VcAssignment_3_0)
{ after(grammarAccess.getProgAccess().getVcAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getProgAccess().getVcAssignment_3_1()); }
(rule__Prog__VcAssignment_3_1)
{ after(grammarAccess.getProgAccess().getVcAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getINT_LITERALTerminalRuleCall_3_0()); }
	RULE_INT_LITERAL
{ after(grammarAccess.getConstantAccess().getINT_LITERALTerminalRuleCall_3_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getFLOAT_LITERALTerminalRuleCall_3_1()); }
	RULE_FLOAT_LITERAL
{ after(grammarAccess.getConstantAccess().getFLOAT_LITERALTerminalRuleCall_3_1()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getSTRING_LITERALTerminalRuleCall_3_2()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getConstantAccess().getSTRING_LITERALTerminalRuleCall_3_2()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getTrueKeyword_3_3()); }

	'True' 

{ after(grammarAccess.getConstantAccess().getTrueKeyword_3_3()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getFalseKeyword_3_4()); }

	'False' 

{ after(grammarAccess.getConstantAccess().getFalseKeyword_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getStringKeyword_0()); }

	'string' 

{ after(grammarAccess.getTypeAccess().getStringKeyword_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getTypeAccess().getIntKeyword_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getFloatKeyword_2()); }

	'float' 

{ after(grammarAccess.getTypeAccess().getFloatKeyword_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBooleanKeyword_3()); }

	'boolean' 

{ after(grammarAccess.getTypeAccess().getBooleanKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Prog__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prog__Group__0__Impl
	rule__Prog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getClassKeyword_0()); }

	'class' 

{ after(grammarAccess.getProgAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prog__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prog__Group__1__Impl
	rule__Prog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getNameAssignment_1()); }
(rule__Prog__NameAssignment_1)
{ after(grammarAccess.getProgAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prog__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prog__Group__2__Impl
	rule__Prog__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getProgAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prog__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prog__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getAlternatives_3()); }
(rule__Prog__Alternatives_3)*
{ after(grammarAccess.getProgAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getVariableAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNamesAssignment_1()); }
(rule__Variable__NamesAssignment_1)
{ after(grammarAccess.getVariableAccess().getNamesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getGroup_2()); }
(rule__Variable__Group_2__0)*
{ after(grammarAccess.getVariableAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__3__Impl
	rule__Variable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getVariableAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__4__Impl
	rule__Variable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeParserRuleCall_4()); }
	ruleType
{ after(grammarAccess.getVariableAccess().getTypeParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getVariableAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Variable__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_2__0__Impl
	rule__Variable__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getVariableAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNamesAssignment_2_1()); }
(rule__Variable__NamesAssignment_2_1)
{ after(grammarAccess.getVariableAccess().getNamesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getTypeParserRuleCall_0()); }
	ruleType
{ after(grammarAccess.getConstantAccess().getTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameAssignment_1()); }
(rule__Constant__NameAssignment_1)
{ after(grammarAccess.getConstantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__3__Impl
	rule__Constant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getAlternatives_3()); }
(rule__Constant__Alternatives_3)
{ after(grammarAccess.getConstantAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getConstantAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Prog__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProgAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__VcAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getVcVariableParserRuleCall_3_0_0()); }
	ruleVariable{ after(grammarAccess.getProgAccess().getVcVariableParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prog__VcAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getVcConstantParserRuleCall_3_1_0()); }
	ruleConstant{ after(grammarAccess.getProgAccess().getVcConstantParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NamesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NamesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_INT_LITERAL : ('0'..'9')+;

RULE_FLOAT_LITERAL : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_STRING_LITERAL : '"' .* '"';

RULE_SL_COMMENT : '//' ~('\n')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


