/*
* generated by Xtext
*/
package com.github.nanothor.lifetc3.ide.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.github.nanothor.lifetc3.ide.services.LifeTC3GrammarAccess;

public class LifeTC3Parser extends AbstractContentAssistParser {
	
	@Inject
	private LifeTC3GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal.InternalLifeTC3Parser createParser() {
		com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal.InternalLifeTC3Parser result = new com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal.InternalLifeTC3Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProgAccess().getAlternatives_3(), "rule__Prog__Alternatives_3");
					put(grammarAccess.getConstantAccess().getAlternatives_3(), "rule__Constant__Alternatives_3");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getProgAccess().getGroup(), "rule__Prog__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_2(), "rule__Variable__Group_2__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getProgAccess().getNameAssignment_1(), "rule__Prog__NameAssignment_1");
					put(grammarAccess.getProgAccess().getVcAssignment_3_0(), "rule__Prog__VcAssignment_3_0");
					put(grammarAccess.getProgAccess().getVcAssignment_3_1(), "rule__Prog__VcAssignment_3_1");
					put(grammarAccess.getVariableAccess().getNamesAssignment_1(), "rule__Variable__NamesAssignment_1");
					put(grammarAccess.getVariableAccess().getNamesAssignment_2_1(), "rule__Variable__NamesAssignment_2_1");
					put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal.InternalLifeTC3Parser typedParser = (com.github.nanothor.lifetc3.ide.ui.contentassist.antlr.internal.InternalLifeTC3Parser) parser;
			typedParser.entryRuleProg();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LifeTC3GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LifeTC3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
